// если методам класса JSON передать невалидный код, то будет ошибка и скрипт упадет. Чтобы этого избежать используется конструкция try, catch которая позволяет ловить и отрабатывать ошибки выполнения кода
// try {
//   // Code that may throw a runtime error
// } catch (error) {
//   // Error handling
// }
// Сначала выполняется код внутри блока try.
// Если ошибок нет, блок catch игнорируется и управление передаётся дальше.
// Если в блоке try произошла ошибка, его выполнение останавливается и интерпретатор переходит в блок catch.
// Переменная error это объект ошибки с информацией о том, что произошло. У этого объекта есть несколько полезных свойств:
// name - тип ошибки. Для ошибки парса это SyntaxError.
// message - сообщение о деталях ошибки.
// stack - стек вызовов функций на момент ошибки. Используется для отладки.

// const data = JSON.parse("Hello, world!");
// console.log("data->", data);

// console.log("Этот лог мы не увидим");

// используя конструкцию try, catch мы можем избежать такой ошибки, и даже если она есть, код все равно продолжит выполнение

try {
  const data = JSON.parse("Hello, world!");
  console.log("data->", data);
} catch (error) {
  console.log(error.name);
  console.log(error.message);
}

console.log("Видим этот код благодаря конструкции try catch");

// то же самое может быть если с бекенда пришел невалидный JSON. Поэтому если мы хотим преобразовать что то из формата JSON в обьект, необходимо исползовать конструкцию try, catch

try {
  const data = JSON.parse({ username: "Mango" });
} catch (error) {
  console.log(error.name);
  console.log(error.message);
}

console.log("Видим этот же лог уже во втором кейсе благодаря try catch");
